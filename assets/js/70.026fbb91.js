(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{349:function(n,a,s){"use strict";s.r(a);var e=s(0),t=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,a=n.$createElement,s=n._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"npm-包管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#npm-包管理","aria-hidden":"true"}},[n._v("#")]),n._v(" npm 包管理")]),n._v(" "),s("h2",{attrs:{id:"npm-发布包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#npm-发布包","aria-hidden":"true"}},[n._v("#")]),n._v(" npm 发布包")]),n._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" login\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" adduser\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[n._v("# 不能和已有的包的名字重名, 还有一点要注意的是npm对包名的限制：不能有大写字母/空格/下滑线")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" publish\n")])])]),s("h2",{attrs:{id:"npm-撤销发布包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#npm-撤销发布包","aria-hidden":"true"}},[n._v("#")]),n._v(" npm 撤销发布包")]),n._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" unpublish\n")])])]),s("ol",[s("li",[s("p",[n._v("根据规范，只有在发包的24小时内才允许撤销发布的包（ unpublish is only allowed with versions published in the last 24 hours）")])]),n._v(" "),s("li",[s("p",[n._v("即使你撤销了发布的包，发包的时候也不能再和被撤销的包的名称和版本重复了（即不能名称相同，版本相同，因为这两者构成的唯一标识已经被“占用”了）")])])]),n._v(" "),s("p",[n._v("npm unpublish的推荐替代命令：")]),n._v(" "),s("p",[s("code",[n._v("npm deprecate <pkg>[@<version>] <message>")])]),n._v(" "),s("p",[n._v("使用这个命令，并不会在社区里撤销你已有的包，但会在任何人尝试安装这个包的时候得到警告")]),n._v(" "),s("p",[n._v("例如：npm deprecate penghuwanapp '这个包我已经不再维护了哟～'")]),n._v(" "),s("h2",{attrs:{id:"npm-更新发布后的包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#npm-更新发布后的包","aria-hidden":"true"}},[n._v("#")]),n._v(" npm 更新发布后的包")]),n._v(" "),s("p",[n._v("事实上npm更新包和发布包的命令是一样的，都是npm publish,不同之处在于，你需要修改包的版本")]),n._v(" "),s("p",[n._v("所以步骤是：\n1.修改包的版本（package.json里的version字段）\n2.npm publish\n关于修改版本的细节请看下面：")]),n._v(" "),s("p",[n._v("七.npm的版本控制——Semantic versioning\n在我们的package.json里面有一个version字段。那么，怎么在项目不断构建的过程中调整版本呢？\nnpm有一套自己的版本控制标准——Semantic versioning（语义化版本）")]),n._v(" "),s("p",[n._v("具体体现为：")]),n._v(" "),s("p",[n._v('对于"version":"x.y.z"')]),n._v(" "),s("p",[n._v("1.修复bug,小改动，增加z")]),n._v(" "),s("p",[n._v("2.增加了新特性，但仍能向后兼容，增加y")]),n._v(" "),s("p",[n._v("3.有很大的改动，无法向后兼容,增加x")]),n._v(" "),s("p",[n._v("例如：我原本的项目是1.0.0版本的话")]),n._v(" "),s("p",[n._v("若是1中情况，变为1.0.1")]),n._v(" "),s("p",[n._v("若是2中情况，变为1.1.0")]),n._v(" "),s("p",[n._v("若是3中情况，变为2.0.0")]),n._v(" "),s("p",[n._v("通过npm version <update_type> 自动改变版本\nupdate_type为patch, minor, or major其中之一，分别表示补丁，小改，大改")])])}],!1,null,null,null);t.options.__file="npm 发布包.md";a.default=t.exports}}]);