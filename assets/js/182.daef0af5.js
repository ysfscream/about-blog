(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{249:function(t,e,n){"use strict";n.r(e);var o=n(0),c=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"react-context-概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-context-概念","aria-hidden":"true"}},[t._v("#")]),t._v(" React Context 概念")]),t._v(" "),n("p",[t._v("Context 提供了一种传递数据的方式，他不需要你手动的通过组件树从上至下逐层传递属性。例如：在应用程序中需要通过许对组件才能获取用户身份验证、本地设置、UI 主题。")]),t._v(" "),n("ul",[n("li",[t._v("Context 提供了一种通过 React 组件树传递数据的方法，他不需要手动传递属性。")]),t._v(" "),n("li",[t._v("Context 主要为解决 React 组件树中被认为全局数据的共享。\n除了实例中的 context，React 组件还可以通过 constructor(props, context)、componentWillReceiveProps(nextProps, nextContext)、shouldComponentUpdate(nextProps, nextState, nextContext) 和 componetWillUpdate(nextProps, nextState, nextContext) 直接访问父组件提供的 Context。")]),t._v(" "),n("li",[t._v("使用 Context，可以跨越组件进行数据的传递")])])])}],!1,null,null,null);c.options.__file="React Context 概念.md";e.default=c.exports}}]);