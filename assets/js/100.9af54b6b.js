(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{372:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"sourcemap-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sourcemap-是什么","aria-hidden":"true"}},[t._v("#")]),t._v(" SourceMap 是什么")]),t._v(" "),a("blockquote",[a("p",[t._v("source-map 存储着位置信息的一个文件，因为开发时的源码通过 webpack 构建混淆压缩后的生产环境部署的代码不一样")])]),t._v(" "),a("p",[t._v("在 webpack 的 development 模式下，会自动开启 source-map")]),t._v(" "),a("p",[t._v("在 webpack 配置中设置 devtool: 'none'，那么就会关闭 source-map")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://webpack.js.org/configuration/devtool/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://webpack.js.org/configuration/devtool/"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("sourcemap文件的格式:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    version "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SourceMap的版本，目前为3")]),t._v("\n    sources"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"***.js,***.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换前的文件，该项是一个数组，表示可能存在多个文件合并")]),t._v("\n    names"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"***"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"***"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"**"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"***"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换前的所有变量名和属性名")]),t._v("\n    mappings"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AACvB,gBAAgB,EAAE;AAClB;"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录位置信息的字符串")]),t._v("\n    file"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"out.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换后的文件名")]),t._v("\n    sourcesContent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" \\t// The module cache\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换后的代码")]),t._v("\n    sourceRoot "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("mappings")]),t._v(" "),a("p",[t._v('以"AACvB,gBAAgB,EAAE;AAClB;"为例:')]),t._v(" "),a("p",[t._v("每个分号对应转换后源码的一行；")]),t._v(" "),a("p",[t._v("每个逗号对应转换后源码的一个位置；")]),t._v(" "),a("p",[t._v("AACvB 代表该位置转换前的源码位置，以 VLQ 编码表示；")]),t._v(" "),a("h2",{attrs:{id:"vlq-编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vlq-编码","aria-hidden":"true"}},[t._v("#")]),t._v(" VLQ 编码")]),t._v(" "),a("p",[t._v("VLQ是Variable-length quantity 的缩写，是一种通用的、使用任意位数的二进制来表示一个任意大的数字的一种编码方式。这种编码最早用于MIDI文件，后来被多种格式采用，它的特点就是可以非常精简地表示很大的数值，用来节省空间。")]),t._v(" "),a("p",[t._v("将 137 改写成二进制形式：10001001")]),t._v(" "),a("p",[t._v("七位一组做分组，不足的补0：0000001 0001001")]),t._v(" "),a("p",[t._v("最后一组开头补0，其余补1：10000001 00001001")]),t._v(" "),a("p",[t._v("所以，137的VLQ编码形式为10000001 00001001")]),t._v(" "),a("h2",{attrs:{id:"base64-vlq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base64-vlq","aria-hidden":"true"}},[t._v("#")]),t._v(" Base64 VLQ")]),t._v(" "),a("p",[t._v("如何对数值137进行Base64 VLQ编码：")]),t._v(" "),a("p",[t._v("将137改写成二进制形式：10001001\n127是正数，末位补0：100010010\n五位一组做分组，不足的补0：01000 10010\n将组倒序排序：10010 01000\n最后一组开头补0，其余补1：110010 001000\n转64进制：y 和 I")]),t._v(" "),a("p",[t._v("可以看出：")]),t._v(" "),a("p",[t._v("在Base64 VLQ中，编码顺序是从低位到高位")]),t._v(" "),a("p",[t._v("而在VLQ中，编码顺序是从高位到低位")]),t._v(" "),a("p",[t._v("对于做前端异常监控来说，source-map 是很有必要的，但是对于性能要求极高的项目，那么可能还是要自己去实现一套独特的监控方式。")])])},[],!1,null,null,null);s.default=e.exports}}]);